REMOVE TABLE status;
REMOVE TABLE anime;
REMOVE TABLE anime_names;
REMOVE TABLE hasName;

DEFINE INDEX name_index ON TABLE status COLUMNS name UNIQUE;
DEFINE INDEX anime_index ON TABLE anime_names COLUMNS anime_id UNIQUE;

DEFINE TABLE status SCHEMAFULL;
DEFINE FIELD name ON TABLE status TYPE string;
DEFINE FIELD created_at ON TABLE status TYPE datetime;
DEFINE FIELD updated_at ON TABLE status TYPE datetime;

DEFINE TABLE anime_names SCHEMAFULL;
DEFINE FIELD anime_id ON TABLE anime_names TYPE record;
DEFINE FIELD visible ON TABLE anime_names TYPE bool;
DEFINE FIELD orginal ON TABLE anime_names TYPE array;
DEFINE FIELD orginal.* ON TABLE anime_names TYPE string;
DEFINE FIELD en ON TABLE anime_names TYPE array;
DEFINE FIELD en.* ON TABLE anime_names TYPE string;
DEFINE FIELD jp ON TABLE anime_names TYPE array;
DEFINE FIELD jp.* ON TABLE anime_names TYPE string;
DEFINE FIELD created_at ON TABLE anime_names TYPE datetime;
DEFINE FIELD updated_at ON TABLE anime_names TYPE datetime;

DEFINE TABLE anime SCHEMAFULL;
DEFINE FIELD season ON TABLE anime TYPE int;
DEFINE FIELD episodes ON TABLE anime TYPE int;
DEFINE FIELD score ON TABLE anime TYPE int;
DEFINE FIELD status ON TABLE anime FLEXIBLE TYPE array;
# DEFINE FIELD status.* ON TABLE anime TYPE object;
# DEFINE FIELD status.*.* ON TABLE anime TYPE array;
# DEFINE FIELD status.*.*[*] ON TABLE anime TYPE string;
DEFINE FIELD visible ON TABLE anime TYPE bool;
DEFINE FIELD description ON TABLE anime TYPE string;
DEFINE FIELD types ON TABLE anime TYPE array;
DEFINE FIELD types.* ON TABLE anime TYPE string;
DEFINE FIELD platforms ON TABLE anime TYPE array;
DEFINE FIELD platforms.* ON TABLE anime TYPE string;
DEFINE FIELD genres ON TABLE anime TYPE array;
DEFINE FIELD genres.* ON TABLE anime TYPE string;
DEFINE FIELD tags ON TABLE anime TYPE array;
DEFINE FIELD tags.* ON TABLE anime TYPE string;
DEFINE FIELD trailer_urls ON TABLE anime TYPE array;
DEFINE FIELD trailer_urls.* ON TABLE anime TYPE string;
DEFINE FIELD info_urls ON TABLE anime TYPE array;
DEFINE FIELD info_urls.* ON TABLE anime TYPE string;
DEFINE FIELD video_urls ON TABLE anime TYPE array;
DEFINE FIELD video_urls.* ON TABLE anime TYPE string;
DEFINE FIELD image_urls ON TABLE anime TYPE array;
DEFINE FIELD image_urls.* ON TABLE anime TYPE string;
DEFINE FIELD updated_at ON TABLE anime TYPE datetime;
DEFINE FIELD created_at ON TABLE anime TYPE datetime;

LET $status = CREATE status SET
    name = "Ongoing",
    updated_at = time::now(),
    created_at = time::now();

LET $status1 = CREATE status SET
    name = "Finished",
    updated_at = time::now(),
    created_at = time::now();

LET $anime = CREATE anime SET
    season = 3,
    episodes = 21,
    score = 8,
    status = SELECT id,name FROM status WHERE name = "Ongoing",
    visible = true,
    description = 'The anime "Fate/Grand Order: Absolute Demonic Front - Babylonia" falls under the genres of action, adventure, fantasy, magic, and supernatural. It is part of the larger Fate franchise and has a total of 21 episodes in its third season. The show is rated 8 out of 10. The status is marked as "Finished," and it is available on Crunchyroll, Funimation, and Netflix streaming platforms. Additionally, it belongs to the Isekai, TV, and Game types.',
    types = [
        "Isakai",
        "TV",
        "Game"
    ],
    platforms = [
        "Crunchyroll",
        "Funimation",
        "Netflix"
    ],
    genres = [
        "action",
        "adventure",
        "fantasy",
        "magic",
        "supernatural"
    ],
    tags = [
        "anime",
        "fate",
        "fate grand order",
        "fate series",
        "fate stay night",
        "fgo",
        "fgo babylonia",
        "fgo zettai majuu sensen babylonia",
    ],
    trailer_urls = [],
    info_urls = ["https://myanimelist.net/anime/38084/Fate_Grand_Order__Zettai_Majuu_Sensen_Babylonia"],
    video_urls = ["https://bs.to/serie/Fate-Grand-Order-Zettai-Majuu-Sensen-Babylonia"],
    image_urls = ["https://cdn.myanimelist.net/images/anime/1194/103420.jpg"],
    updated_at = time::now(),
    created_at = time::now();


let $names = CREATE anime_names SET
    anime_id = $anime.id,
    visible = true,
    orginal = [],
    en = ["Fate/Grand Order: Absolute Demonic Front - Babylonia"],
    jp = ["Fate/Grand Order: Zettai Majuu Sensen Babylonia"],
    updated_at = time::now(),
    created_at = time::now();

RETURN $status;
RETURN $status1;
RETURN $anime;
RETURN $names;

SELECT anime_id.* FROM anime_names;
SELECT * FROM anime_names WHERE anime_id = $anime.id;

# -------------------#----------------------------------#
REMOVE TABLE user;
#REMOVE LOGIN username;
REMOVE SCOPE account;

DEFINE TABLE user SCHEMAFULL;

DEFINE INDEX email ON TABLE user COLUMNS email UNIQUE;
DEFINE INDEX username ON TABLE user COLUMNS username UNIQUE;


DEFINE FIELD username ON TABLE user TYPE string 
    ASSERT  $value != NONE;
DEFINE FIELD name ON TABLE user TYPE object;
DEFINE FIELD name.first ON TABLE user TYPE string;
DEFINE FIELD name.last ON TABLE user TYPE string;
DEFINE FIELD email ON TABLE user TYPE string
    ASSERT $value != NONE AND is::email($value);
DEFINE FIELD password ON TABLE user TYPE string
    ASSERT  $value != NONE;
DEFINE FIELD status ON TABLE user TYPE bool
    ASSERT  $value != NONE;
DEFINE FIELD role ON TABLE user TYPE string
    ASSERT  $value != NONE;
DEFINE FIELD permission ON TABLE user TYPE object
    ASSERT  $value != NONE;
DEFINE FIELD permission.grade ON TABLE user TYPE int
    ASSERT  $value != NONE;
DEFINE FIELD permission.select ON TABLE user TYPE bool
    ASSERT $value != NONE;
DEFINE FIELD permission.create ON TABLE user TYPE bool
    ASSERT  $value != NONE;
DEFINE FIELD permission.update ON TABLE user TYPE bool
    ASSERT  $value != NONE;
DEFINE FIELD permission.delete ON TABLE user TYPE bool
    ASSERT  $value != NONE;
DEFINE FIELD updated_at ON TABLE user TYPE datetime;
DEFINE FIELD created_at ON TABLE user TYPE datetime;

DEFINE EVENT passwordhash ON TABLE user WHEN $befor == NONE THEN {
    
};

DEFINE SCOPE account SESSION 24h
    SIGNUP ( CREATE useraccount SET email = $email, password = crypto::argon2::generate($password))
    SIGNIN ( SELECT * FROM useraccount WHERE $email AND crypto::argon2::compare(password, $password))
;

CREATE user SET
    username = "Kevbchef",
    name.first = "kevin",
    name.last = "Muller",
    email = "kevin@example.com",
    password = "1234",
    status = true,
    role = "owner",
    permission.grade = 0,
    permission.select = true,
    permission.create = true,
    permission.update = true,
    permission.delete = true,
    updated_at = time::now(),
    created_at = time::now();

#USE NS test DB test;
#DEFINE LOGIN username ON DATABASE PASSWORD "1234";